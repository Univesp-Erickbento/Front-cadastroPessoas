name: CI/CD web Angular

on:
  push:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout do c√≥digo
        uses: actions/checkout@v3

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: üì¶ Instalar depend√™ncias
        run: npm install

      - name: üõ†Ô∏è Build Angular para produ√ß√£o
        run: npm run build angularproject -- --configuration production

      - name: üè∑Ô∏è Obter vers√£o do package.json
        id: project_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Vers√£o: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: üê≥ Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üßπ Limpar vers√µes antigas no Docker Hub
        run: |
          # Obter as tags do Docker Hub
          TAGS=$(curl -s "https://hub.docker.com/v2/repositories/torresbento/tbmt-web-angular/tags/" | jq -r '.results[].name')

          # Obter a vers√£o atual que est√° sendo usada
          CURRENT_VERSION=${{ steps.project_version.outputs.version }}

          # Identificar as vers√µes mais antigas
          REMOVE_TAGS=()
          for TAG in $TAGS; do
            # Verificar se a tag √© mais antiga que a vers√£o atual
            if [[ "$TAG" < "$CURRENT_VERSION" ]]; then
              REMOVE_TAGS+=($TAG)
            fi
          done

          # Manter as duas vers√µes mais antigas
          REMOVE_TAGS=($(echo "${REMOVE_TAGS[@]}" | tr ' ' '\n' | sort | head -n 2))

          # Excluir as vers√µes antigas encontradas
          for TAG in "${REMOVE_TAGS[@]}"; do
            echo "Removendo vers√£o $TAG do Docker Hub..."
            docker rmi torresbento/tbmt-web-angular:$TAG || true
            docker push torresbento/tbmt-web-angular:$TAG || true
          done

      - name: üèóÔ∏è Build da imagem Docker do frontend
        run: docker build -t torresbento/tbmt-web-angular:${{ steps.project_version.outputs.version }} .

      - name: üè∑Ô∏è Taguear vers√£o atual como latest
        run: |
          docker tag torresbento/tbmt-web-angular:${{ steps.project_version.outputs.version }} torresbento/tbmt-web-angular:latest
          docker push torresbento/tbmt-web-angular:latest

      - name: üì§ Push da imagem para Docker Hub
        run: docker push torresbento/tbmt-web-angular:${{ steps.project_version.outputs.version }}

      - name: üöÄ Deploy no servidor via SSH
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.REMOTE_PORT }}
          script: |
            echo "‚õî Parando container antigo..."
            sudo docker stop web-angular || true

            echo "üóëÔ∏è Removendo container antigo..."
            sudo docker rm web-angular || true

            echo "üßπ Removendo imagem antiga..."
            sudo docker image prune -a -f --filter "label=project=web-angular" || true

            echo "‚¨áÔ∏è Baixando nova imagem..."
            sudo docker pull torresbento/tbmt-web-angular:${{ steps.project_version.outputs.version }}

            echo "üåê Garantindo rede personalizada (se necess√°rio)..."
            if ! sudo docker network inspect tbmt-rede-docker > /dev/null 2>&1; then
              sudo docker network create --driver bridge --subnet 172.18.0.0/16 tbmt-rede-docker
            fi

            echo "üöÄ Subindo novo container..."
            sudo docker run -d --name web-angular \
              --label project=web-angular \
              --network tbmt-rede-docker \
              -p 4200:80 \
              torresbento/tbmt-web-angular:${{ steps.project_version.outputs.version }}
